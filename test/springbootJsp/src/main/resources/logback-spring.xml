<configuration debug="true">
<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
<encoder>
<charset>UTF-8</charset>
<Pattern>%n %d %5p [%c] %m</Pattern>
<Pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</Pattern>
</encoder>
</appender>
<appender name="console-infolog" class="ch.qos.logback.core.ConsoleAppender">
<encoder>
<charset>UTF-8</charset>
<Pattern>%n %d %5p %m%n</Pattern>
<Pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</Pattern>
</encoder>
</appender>
<logger name="com.example.test2" level="DEBUG" appender-ref="console"/>
<logger name="jdbc.sqlonly" level="debug" appender-ref="console-infolog"/>
<logger name="jdbc.connection" level="OFF"/>
<logger name="jdbc.audit" level="OFF"/>
<logger name="jdbc.resultset" level="OFF"/>
<logger name="jdbc.resultsettable" level="info" appender-ref="console-infolog"/>
<root level="info">
<appender-ref ref="console"/>
</root>
</configuration>
<!--   로그 파일 생성 예문1  -->
<!-- <?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <property name="LOGS_PATH" value="d:/file_upload/logs"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>
        </layout>
    </appender>
    
    <appender name="SAMPLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
  
    <appender name="DAILY_ROLLING_FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_PATH}/logback.log</file>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/logback.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>  
                파일당 최고 용량 kb, mb, gb 
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <logger name="com.example.test2" level="DEBUG">
        <appender-ref ref="SAMPLE" />
    </logger>
    <logger name="com.example.test2" level="INFO">
        <appender-ref ref="DAILY_ROLLING_FILE_APPENDER" />
    </logger>
    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="DAILY_ROLLING_FILE_APPENDER" />
    </root>
</configuration> -->
<!--   로그 파일 생성 예문2  -->
<!--  
<?xml version="1.0" encoding="UTF-8"?>
60초마다 설정 파일의 변경을 확인 하여 변경시 갱신
<configuration scan="true" scanPeriod="60 seconds">
    springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.
    <springProfile name="local">
        <property resource="logback-local.properties"/>
    </springProfile>
    <springProfile name="dev">
        <property resource="logback-dev.properties"/>
    Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
 
    log file path
    <property name="LOG_PATH" value="${log.config.path}"/>
    log file name
    <property name="LOG_FILE_NAME" value="${log.config.filename}"/>
    err log file name
    <property name="ERR_LOG_FILE_NAME" value="err_log"/>
    pattern
    <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>
 
    Console Appender
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
 
    File Appender
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        파일경로 설정
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
 
        출력패턴 설정
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
 
        Rolling 정책
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                파일당 최고 용량 kb, mb, gb
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거
            <maxHistory>30</maxHistory>
            <MinIndex>1</MinIndex>
            <MaxIndex>10</MaxIndex>
        </rollingPolicy>
    </appender>
 
    에러의 경우 파일에 로그 처리
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        Rolling 정책
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축
            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                파일당 최고 용량 kb, mb, gb
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>
 
    root레벨 설정
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </root>
 
    특정패키지 로깅레벨 설정
    <logger name="org.apache.ibatis" level="DEBUG" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </logger>
</configuration>  -->
<!-- Log4jdbc -->
<!--  
	<logger name="jdbc" level="OFF"/>
	<logger name="jdbc.connection" level="OFF"/>
	<logger name="jdbc.sqlonly" level="OFF"/>
	<logger name="jdbc.sqltiming" level="DEBUG" additivity="false">
		<appender-ref ref="DATABASE_FILE_APPENDER"/>
	</logger>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="OFF"/>
   -->
<!--  
  jdbc.connection 		: 수행 도중 열리고 닫히는 연결 내용을 포함합니다. 연결 누수 문제를 찾는데에 유용다.
  jdbc.resultsettable : JDBC 결과를 테이블로 기록. 
  jdbc.resultset			: DBC 결과를 포함합니다. ResultSet 오브젝트에 대한 모든 호출이 로깅
  jdbc.audit 					: ResultSets를 제외한 모든 JBDC 호출 정보를 로그로 남긴다. 
  											이는 매우 큰 볼륨을 가지는 결과물이므로, 특별히 JDBC 문제를 추적할 때 외엔 권하지 않는다.
  jdbc.sqltiming			: SQL문과 해당 SQL을 실행하는데 걸린 시간을 포함.
  jdbc.sqlonly				: SQL문만을 로그로 남긴다. 가독성을 위해, preparedStatement는 관련된 arguments 값으로 대체.
  
  
  Appender클래스
  
  Consoleappender : 콘솔에 로그 메시지를 출력
  FileAppender : 파일에 로그 메시지 출력
  RollingFileAppender : 파일 크기가 일정 기준을 넘으면 기존 파일을 백업파일로 바꾸고 처음 부터 다시 기록
  //DailyRollingAppender : 설정한 기간 단위로 새 파일을 만들어 로그 메시지를 기록
  
  
  PatternLayout 클래스
  
  %p: debug, info, error, fatal 등 ㄹ그 레벨 이름 출력
  %m : 로그 메시지 출력
  %d : 로깅 이벤트 발생 시각 출력
  %F : 로깅이 발생한 프로그램 파일 이름 출력
  %l : 로깅이 발생한 caller의 정보 출력
  %L : 로깅이 발생한 caller의 라인 수 출력
  %M : 로깅이 발생한 caller의 method이름 출력
  %c : 로깅메시지 앞에 전체 패키지 이름이나 전체 파일이름 출력
  
  
  log4j 로그 레벨
  
  FATAL: 시스템 차원세 심각한 문제 발생해 애플리케이션 작동이 부가능할 경우에 해당하는 레벨
  ERROR: 실행 중 문제가 발생한 상태
  WARN: 경고 메시지 - 향후 시스템 오류의 원이 될 수 있는 경우
  INFO: 로그인, 상태 변경과 같은 실제 애플리케이션 운영과 관련된 정보 메시지 표시
  DEVUG: 개발시 디버깅 용도 사용하는 메시지
  TRACE: DEBUG 레벨보다 상세한 로깅 정보를 출력하기 위한 도입된 레벨
  
    -->